package in.cozynest.cozyapis.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.xml.bind.annotation.XmlRootElement;

//@NamedQueries({
//	@NamedQuery(name = "OrderedSubscription.findByStatus", query = "select s from OrderedSubscription s where s.status=:status"),
//	@NamedQuery(name = "OrderedSubscription.findByStartDate", query = "select s from OrderedSubscription s where s.startDate=:startDate"),
//	@NamedQuery(name = "OrderedSubscription.findByEndDate", query = "select s from OrderedSubscription s where s.endDate=:endDate"),
//	@NamedQuery(name = "OrderedSubscription.findByOrderId", query = "select s from OrderedSubscription s Join s.order o where o.id=:orderId"),
//	@NamedQuery(name = "OrderedSubscription.findByUserId", query = "select s from OrderedSubscription s Join s.order o Join o.user c where c.id=:userId"),
//	@NamedQuery(name = "OrderedSubscription.findByGeneratedUserId", query = "select s from OrderedSubscription s Join s.order o Join o.user c where c.generatedUserId=:generatedUserId"),
//	@NamedQuery(name = "OrderedSubscription.findByPhone", query = "select s from OrderedSubscription s Join s.order o Join o.user c where c.phone=:phone"),
//	@NamedQuery(name = "OrderedSubscription.findTodaysDeliveryByCurrentDateAndCurrentShift", query = "select s from OrderedSubscription s Join s.order o Join o.user c where s.status='ACTIVE' and (s.subscriptionType=:shift or s.subscriptionType='LUNCHDINNER') and s not in (select csd.subscription.id from CancelledSubscriptionDate csd where csd.cancelDate=:date and csd.cancelShift=:cancelShift)"),
//	@NamedQuery(name = "OrderedSubscription.findUsersByEndDateAndEndShift", query = "select c from OrderedSubscription s Join s.order o Join o.user c where s.endDate=:endDate and s.endShift=:endShift") })

@Entity
@Table (name = "ordered_subscription")
@XmlRootElement
public class OrderedSubscription implements java.io.Serializable,IAuthorization {
	
	private static final long serialVersionUID = -8998988523331603884L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	@Temporal(TemporalType.DATE)
	@Column(name = "start_date", nullable = false)
	private Date startDate;

	@Temporal(TemporalType.DATE)
	@Column(name = "end_date", nullable = false)
	private Date endDate;

	@Enumerated(EnumType.STRING)
	@Column(name = "status", nullable = false)
	private Status status;

	@OneToOne
	@JoinColumn(name = "order_id")
	private Order order;

	@Column(name = "address", nullable = false)
	private String address;

	@Column(name = "start_shift", nullable = false)
	@Enumerated(EnumType.STRING)
	private Shift startShift;

	@Column(name = "end_shift", nullable = false)
	@Enumerated(EnumType.STRING)
	private Shift endShift;

	@Column(name = "duration", nullable = false)
	@Enumerated(EnumType.STRING)
	private PlanDuration planDuration;
	
	@Column(name = "package_id", nullable = false)
	private Package pakage;
	
	@Column(name = "plan_type", nullable = false)
	private PlanType planType;

	public enum PlanDuration {
		MONTHLY, WEEKLY
	}

	public enum Status {
		PENDING, ACTIVE, COMPLETE
	}

	public enum Shift {
		BREAKFAST, LUNCH, DINNER
	}
	
	public enum PlanType {
		BREAKFAST, LUNCH, DINNER, LUNCHDINNER
	}

	public OrderedSubscription() {
		super();
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public Date getStartDate() {
		return startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public Date getEndDate() {
		return endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	public Status getStatus() {
		return status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	public Order getOrder() {
		return order;
	}

	public void setOrder(Order order) {
		this.order = order;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Shift getStartShift() {
		return startShift;
	}

	public void setStartShift(Shift startShift) {
		this.startShift = startShift;
	}

	public Shift getEndShift() {
		return endShift;
	}

	public void setEndShift(Shift endShift) {
		this.endShift = endShift;
	}

	public PlanDuration getPlanDuration() {
		return planDuration;
	}

	public void setPlanDuration(PlanDuration planDuration) {
		this.planDuration = planDuration;
	}

	public Package getPakage() {
		return pakage;
	}

	public void setPakage(Package pakage) {
		this.pakage = pakage;
	}

	public PlanType getPlanType() {
		return planType;
	}

	public void setPlanType(PlanType planType) {
		this.planType = planType;
	}

	@Override
	public String getGeneratedUserId() {
		return order.getUser().getGeneratedUserId();
	}

	@Override
	public String getUserTypeString() {
		return order.getUser().getUserTypeString();
	}


}